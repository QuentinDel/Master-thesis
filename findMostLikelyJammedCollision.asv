function [idColl, uniqIdVeh] = findMostLikelyJammedCollision(nbCol, nbNotTransmis, idNotTransmitStruct, collisions, colDict, muEmiss, sigma2Emiss)

scores = zeros(1, nbNotTransmis);

for i = 1 : nbNotTransmis
    impliedWith = findImpliedWith(idNotTransmitStruct{i}, idNotTransmitStruct, collisions);
    %If no impliedWith -> isJammed
    if isempty(impliedWith)
        uniqIdVeh = idNotTransmitStruct{i}.uniqId;
        [idColl] = findClosestCol(idNotTransmitStruct{i}.id, nbCol, idNotTransmitStruct{i}.distances, muEmiss, sigma2Emiss);
        return
    end
    %If not sum score
    for j = 1 : length(impliedWith)
        key = num2str(sort([idNotTransmitStruct{i}.id impliedWith(j)]));
        if isKey(colDict, key)
            scores(i) = scores(i) + colDict(key);
        end
    end 
end

scores

end

function impliedWith = findImpliedWith(idStruct, idNotTransmitStruct, collisions)
    impliedWith = [];
    colImplied = idStruct.implication

end

function [idColl] = findClosestCol(idVeh, nbCol, posCol, muEmiss, sigma2Emiss)
    probMax = 0;
    idColl = 1;
    for i = 1 : nbCol
       prob = multivariateGaussian(posCol(i), muEmiss(idVeh), sigma2Emiss(idVeh));

       if prob > probMax
%            if probMax ~= 0 && (abs(prob - probMax))/abs(prob + probMax) < 0.01
%               %fprintf('Difficult to determine which is the bad one\n'); 
%            end
           probMax = prob;
           idColl = i;
       end 
    end
    
%     if probMax == 0
%        %fprintf('Impossible to find a correct position for this configuration of vehicles\n'); 
%     end
end